"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const LogEntry_1 = require("./LogEntry");
const noop = function () {
    // Intentionally left blank.
};
const logLevelMap = {
    debug: 5,
    info: 4,
    warn: 3,
    error: 2,
    fatal: 1
};
class Logger {
    constructor(configuration, sourcePath, packageJson) {
        this.configuration = configuration;
        this.sourcePath = sourcePath;
        this.module = packageJson;
        this.isDebugMode = configuration.highestEnabledLogLevel === 'debug';
        this.numericLogLevel = logLevelMap[configuration.highestEnabledLogLevel];
        if (this.numericLogLevel < 5) {
            // eslint-disable-next-line @typescript-eslint/unbound-method
            this.debug = noop;
        }
        if (this.numericLogLevel < 4) {
            // eslint-disable-next-line @typescript-eslint/unbound-method
            this.info = noop;
        }
        if (this.numericLogLevel < 3) {
            // eslint-disable-next-line @typescript-eslint/unbound-method
            this.warn = noop;
        }
        if (this.numericLogLevel < 2) {
            // eslint-disable-next-line @typescript-eslint/unbound-method
            this.error = noop;
        }
        if (this.configuration.debugModuleFilter.length === 0) {
            this.isDebugFilterEnabled = true;
        }
        else {
            this.isDebugFilterEnabled = this.configuration.debugModuleFilter.includes(this.module.name);
        }
    }
    fatal(message, metadata) {
        this.log('fatal', message, metadata);
    }
    error(message, metadata) {
        this.log('error', message, metadata);
    }
    warn(message, metadata) {
        this.log('warn', message, metadata);
    }
    info(message, metadata) {
        this.log('info', message, metadata);
    }
    debug(message, metadata) {
        if (!this.isDebugFilterEnabled) {
            return;
        }
        this.log('debug', message, metadata);
    }
    log(logLevel, message, metadata) {
        const logEntry = new LogEntry_1.LogEntry(this.configuration.logEntryIdGenerator.next().value, this.configuration.hostname, process.pid, this.configuration.application, this.module, this.sourcePath, Date.now(), logLevel, message, metadata);
        const formattedLogEntry = this.configuration.formatter(logEntry);
        /* eslint-disable no-console */
        console.log(formattedLogEntry);
        /* eslint-enable no-console */
    }
}
exports.Logger = Logger;
