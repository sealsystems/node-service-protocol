"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMiddleware = void 0;
const flaschenpost_1 = require("../flaschenpost");
const on_finished_1 = __importDefault(require("on-finished"));
const stack_trace_1 = __importDefault(require("stack-trace"));
const getMiddleware = function ({ logOn = 'response', logLevel = 'info' } = {}) {
    const sourcePath = stack_trace_1.default.get()[1].getFileName();
    const logger = flaschenpost_1.flaschenpost.getLogger(sourcePath);
    return function (req, res, next) {
        const requestData = {
            method: req.method,
            path: req.url,
            httpVersion: req.httpVersion,
            remoteAddress: req.socket.remoteAddress,
            referrer: req.headers.referer,
            userAgent: req.headers['user-agent']
        };
        if (logOn === 'request') {
            logger[logLevel](`Receiving '${requestData.method} ${requestData.path}'...`, {
                request: requestData
            });
            return next();
        }
        const requestStart = Date.now();
        on_finished_1.default(res, () => {
            const responseEnd = Date.now();
            const contentLengthHeader = res.getHeader('content-length');
            let contentLength;
            switch (typeof contentLengthHeader) {
                case 'number':
                    contentLength = contentLengthHeader;
                    break;
                case 'string':
                    contentLength = contentLengthHeader ? Number(contentLengthHeader) : undefined;
                    break;
                case 'object':
                    contentLength = contentLengthHeader[0] ? Number(contentLengthHeader[0]) : undefined;
                    break;
                case 'undefined':
                    break;
                default:
                    throw new Error('Invalid operation.');
            }
            const responseData = {
                statusCode: res.statusCode,
                time: responseEnd - requestStart,
                contentLength
            };
            logger[logLevel](`Responded '${requestData.method} ${requestData.path}'.`, {
                request: requestData,
                response: responseData
            });
        });
        next();
    };
};
exports.getMiddleware = getMiddleware;
