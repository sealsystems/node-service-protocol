"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.asHumanReadable = void 0;
const chalk_1 = __importDefault(require("chalk"));
const date_fns_1 = require("date-fns");
const stringify_object_1 = __importDefault(require("stringify-object"));
const asHumanReadable = function (logEntry) {
    const dateTime = new Date(logEntry.timestamp);
    let origin = '', result = '';
    origin = `${logEntry.hostname}`;
    origin += `::${logEntry.application.name}@${logEntry.application.version}`;
    if (logEntry.application.name !== logEntry.module.name) {
        origin += `::${logEntry.module.name}@${logEntry.module.version}`;
    }
    if (logEntry.source) {
        origin += ` (${logEntry.source})`;
    }
    const colorize = {
        fatal: chalk_1.default.magenta,
        error: chalk_1.default.red,
        warn: chalk_1.default.yellow,
        info: chalk_1.default.green,
        debug: chalk_1.default.white
    };
    result += colorize[logEntry.level].bold(`${logEntry.message} (${logEntry.level})`);
    result += '\n';
    result += chalk_1.default.white(origin);
    result += '\n';
    result += chalk_1.default.gray(`${date_fns_1.lightFormat(dateTime, 'HH:mm:ss.SSS')}@${date_fns_1.lightFormat(dateTime, 'yyyy-MM-dd')} ${logEntry.processId}#${logEntry.id}`);
    result += '\n';
    if (logEntry.metadata) {
        result += chalk_1.default.gray(stringify_object_1.default(logEntry.metadata, {
            indent: '  ',
            singleQuotes: true
        }).replace(/\\n/gu, '\n'));
        result += '\n';
    }
    result += chalk_1.default.gray('\u2500'.repeat(process.stdout.columns || 80));
    return result;
};
exports.asHumanReadable = asHumanReadable;
